[WAS vs WS]
1. WAS(Web Application Server)
- 비지니스 로직 첨가 가능
- Tomcat, PHP, ASP, Net

2. WS(Web Server)
- 비지니스 로직을 넣을 수 없음
- Nginx, Apache



[많은 트래픽이 발생한 경우 대처법]
1. 스케일 업(Scale Up) :
- 서버에 CPU나 RAM 등을 추가하여 서버의 하드웨어 스펙을 향상

2. 스케일 아웃(Scale Out) :
- 서버를 여러 대 추가하여 시스템을 증가


[CORS]
(Cross-Origin-Resource-Sharing). 도메인이 다른 2개의 사이트가 데이터를 주고 받을 때 발생하는 문제. A사이트에서 B사이트로 데이터를 요청하면, 따로 설정해주지 않는 한 CORS 에러가 발생.
 CORS 발생 연유는 서버 내에 요청이 허락된 도메인에만 데이터를 주기 위함이나, 요청을 허락하기 위해선 Access-Control-Allow-Origin:{도메인} 과 같은 내용을 Response의 헤더에 추가해줘야 함. 만약 도메인을 *으로 설정시, 모든 도메인에 대한 요청 허락이 가능. 

1. Access-Control-Allow-Origin :
- 요청을 보내는 페이지 출처 [*, 도메인]

2. Access-Control-Allow-Method :
- 요청을 허용하는 메소드 (Default : GET, POST)

3. Access-Control-Max-Age :
- 클라이언트에서 preflight 요청 (서버의 응답 가능 여부 확인) 결과를 저장할 시간

4. Access-Control-Allow-Headers :
- 요청을 허용하는 헤더


[아파치]
- 기본이 멀티 프로세스 구현. but 설정에 따라 멀티 스레드를 함께 운용 가능


[톰켓]
- 요청을 처리하기 위한 '스레드 풀'을 관리. 요청이 오면 '스레드 풀'에서 스레드를 꺼내 요청을 처리함.


[디자인 패턴]
1. 생성 패턴
- 팩토리 : 객체를 생성하기 위해 씀
- 추상 팩터리 : 팩토리를 만들기 위해 씀
- 빌드 : 상황에 따라 동적 인자를 필요로 하는 객체를 생성하기 위해 씀
- 싱글톤 패턴 : 객체를 1개만 생성하여 항상 참조 가능하도록 고안된 것

2. 구조 패턴
- 어댑터 : 호환성이 맞지 않는 두 클래스를 연결하기 위해 씀
- 프록시 : 어떤 객체에 접근하기 위해 대체제를 씀
- 퍼사드 : 복합 기능을 단순하게 하는 인터페이스를 제공


[Servlet]
: client의 요청을 처리하고, 그 결과를 반환하는 Servlet 클래스의 구현 규칙을 지킨 java web programing 기술. Spring MVC에서 controller로 활용하며, 사용자의 요청을 받아 처리한 후 결과를 반환.


[Spring 기초 지식(DI, DL, IoC, AOP)]
1. DI(Dependency Injection) : 한 객체에서 다른 객체를 필요로 하는 의존성을 갖게 함

2. DL(Dependency Look-up) : 한 객체에서 필요로 하는 다른 객체를 찾아서 사용하는 기술

3. IoC(Inverstion of Control) : 직접 제어해야 할 부분의 권한을 프레임워크 등에 넘기는 기술

4. AOP(Aspect Oriented Programming) : 공통 관심 사항을 추출하여 원하는 곳에 적용하는 기술


[VO, DTO, BO, DAO]
1. VO(Value Object) : 실제 데이터만을 저장하는 클래스

2. DTO(Data Transfer Object) : 데이터를 주고 받고자 사용하는 클래스

3. BO(Business Object) : 여러 DAO를 활용해 business logic을 처리하는 클래스로, service에 해당

4. DAO(Data Access Object) : DB에 접근하여 실제 data를 조회 및 조작하는 클래스, repository, mapper 를 지칭











